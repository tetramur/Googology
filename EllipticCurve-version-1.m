(* ::Package:: *)

(* ::Input:: *)
(*(*This module is for calculating all important quantities for elliptic curves and verifying BSD conjecture.*)*)
(**)
(*(*Auxiliary functions. EE is elliptic curve in Magma/SageMath form. Finished.*)*)
(**)
(*EE:=EllipticCurve[0,0,1,-79,342]*)
(**)
(*WeierstrassModel:={0,0,0,-27*c4,-54*c6}*)
(**)
(*MinWeierstrassEq:=(y^2+EE[[1]]*x*y+EE[[3]]*y-x^3-EE[[2]]*x^2-EE[[4]]*x-EE[[5]])*)
(**)
(*NonextendedModel:=Expand[(x^3+b2/4*x^2+b4/2*x+b6/4)/.x->(x-b2/12)]*)
(**)
(*newa1[eq_]:=Coefficient[Coefficient[eq,x,1],y,1]*)
(**)
(*a1:=newa1[MinWeierstrassEq]*)
(**)
(*newa2[eq_]:=-Coefficient[Coefficient[eq,x,2],y,0]*)
(**)
(*a2:=newa2[MinWeierstrassEq]*)
(**)
(*newa3[eq_]:=Coefficient[Coefficient[eq,x,0],y,1]*)
(**)
(*a3:=newa3[MinWeierstrassEq]*)
(**)
(*newa4[eq_]:=-Coefficient[Coefficient[eq,x,1],y,0]*)
(**)
(*a4:=newa4[MinWeierstrassEq]*)
(**)
(*newa6[eq_]:=-Coefficient[Coefficient[eq,x,0],y,0]*)
(**)
(*a6:=newa6[MinWeierstrassEq]*)
(**)
(*b2:=a1^2+4a2*)
(**)
(*b4:=a1*a3+2a4*)
(**)
(*b6:=a3^2+4a6*)
(**)
(*b8:=a1^2*a6-a1*a3*a4+a2*a3^2+4*a2*a6-a4^2*)
(**)
(*c4:=b2^2-24b4*)
(**)
(*c6:=-b2^3+36b2*b4-216b6*)
(**)
(*(*Important invariants for working with elliptic curves. Finished.*)*)
(**)
(*CurveDiscriminant:=-b2^2*b8+9b2*b4*b6-8b4^3-27b6^2*)
(**)
(*Delta:=CurveDiscriminant*)
(**)
(*JInvariant:=c4^3/Delta*)
(**)
(*BaseCond:=Times@@MultplBReducPrimes*Times@@(AdditiveBReducPrimes^2)*)
(**)
(*Conductor:=BaseCond*2^factor2*3^factor3*)
(**)
(*factor2:=DetailedTateCond[2]*)
(**)
(*factor3:=DetailedTateCond[3]*)
(**)
(*(*Adding points and multiplying them by number. Almost finished*)*)
(**)
(*PointReflect[{x1_,y1_}]:=*)
(*Flatten[{{x1,y1}[[1]],y/.Solve[{(MinWeierstrassEq/.x->x1)==0,y!=y1},y]}]*)
(**)
(*PointCurveNegAdd[{x1_,y1_},{x2_,y2_}]:=Flatten[{x,y}/.Solve[{MinWeierstrassEq==0,y-y1==(y2-y1)/(x2-x1)*(x-x1),*)
(*x!=x1,x!=x2},{x,y}]]*)
(**)
(*PointNegativeDouble[{x1_,y1_}]:=Flatten[{x,y}/.Solve[{MinWeierstrassEq==0,*)
(*y-y1==-((D[MinWeierstrassEq,x]/D[MinWeierstrassEq,y])/.(x->x1)/.(y->y1))**)
(*(x-x1),x!=x1},{x,y}]]*)
(**)
(*CurveAdd[point1_,point2_]:=Which[point1===InfinityPoint,point2,*)
(*point2===InfinityPoint,point1,*)
(*point2==PointReflect[point1],InfinityPoint,*)
(*point1[[1]]!=point2[[1]],PointReflect[PointCurveNegAdd[point1,point2]],*)
(*point1==point2,PointReflect[PointNegativeDouble[point1]]]*)
(**)
(*CurveMulNum[point_,n_]:=Which[n==0,{0,0},n==1,point,n>1,*)
(*CurveAdd[point,CurveMulNum[point,n-1]],True,*)
(*PointReflect[CurveMulNum[point,-n]]]*)
(**)
(*CurveRecursDouble[{x1_,y1_},n_]:=CurveRecursDouble[{x1,y1},n]=*)
(*If[n==0,{x1,y1},CurveAdd[CurveRecursDouble[{x1,y1},n-1],*)
(*CurveRecursDouble[{x1,y1},n-1]]]*)
(**)
(*(*Calculating torsion point, order and group. Almost finished.*)*)
(**)
(*MultiList[u1_,u2_]:=Sort[Flatten[Table[u1*(u2[[n]]),{n,1,Length[u2]}]]]*)
(**)
(*TorsionPointCndd:=Join[{0},(Select[Divisors[Delta],IntegerQ[#^(1/2)]&])^(1/2)]*)
(**)
(*TorsionPoint:=Flatten[Select[Table[If[*)
(*Length[Solve[(MinWeierstrassEq/.(y->TorsionPointCndd[[n]]))==0,*)
(*x,Integers]]==0,0,*)
(*Join[{#},{TorsionPointCndd[[n]]}]&/@*)
(*(x/.Solve[(MinWeierstrassEq/.(y->TorsionPointCndd[[n]]))==0,x,Integers])],*)
(*{n,1,Length[TorsionPointCndd]}],Head[#]==List&],1]*)
(**)
(*TorsionOrder:=*)
(*Min[FirstPosition[Table[CurveMulNum[{0,0},n]==InfinityPoint,{n,1,16}],True]]*)
(**)
(*TorsionGroup:=CyclicGroup[TorsionOrder]*)
(**)
(*(*BSD invariants. WIP*)*)
(**)
(*AuxRealPeriod[aa4_,aa6_]:=*)
(*Re[(t/.FindRoot[WeierstrassP[t,{-4*aa4,-4*aa6}]==*)
(*Max[Select[x/.Solve[x^3+aa4*x+aa6==0,x],Im[#]==0&]],{t,1/(Abs[Delta])^(1/12)},WorkingPrecision->2*30])*2]*)
(**)
(*RealPeriod:=If[Delta>0,2,1]**)
(*AuxRealPeriod[Delete[Take[*)
(*Reverse[CoefficientList[Expand[(x^3+b2/4*x^2+b4/2*x+b6/4)/.x->(x-b2/12)],x]],*)
(*{-2,-1}],0]]*)
(**)
(*HeightApprox[point_,k_]:=Block[{t=CurveMulNum[point,k][[1]]},*)
(*N[Log[Max[{Numerator[t],Denominator[t]}]]/k^2]]*)
(**)
(*PairHeightApprox[{x1_,y1_},{x2_,y2_},k_]:=*)
(*1/2*(HeightApprox[CurveAdd[{x1,y1},{x2,y2}],k]-*)
(*(HeightApprox[{x1,y1},k]+HeightApprox[{x2,y2},k]))*)
(**)
(*TamagawaProduct:=Apply[Times,TamagawaIndex[#]&/@(#[[1]]&/@FactorInteger[Delta])]*)
(**)
(*(*L-function via product which is transformed into Dirichlet's sum - this is done via Terms[n] function*)*)
(**)
(*BadReductionPrimes:=#[[1]]&/@FactorInteger[Abs[Delta]]*)
(**)
(*AdditiveBReducPrimes:=BadReductionPrimes[[#]]&/@Flatten[Position[IntegerQ[#]&/@(c4/BadReductionPrimes),True]]*)
(**)
(*MultplBReducPrimes:=Select[BadReductionPrimes[[#]]&/@Flatten[Position[!IntegerQ[#]&/@(c4/BadReductionPrimes),True]],#>=5&]*)
(**)
(*SplitMultBReducPrimes:=Select[MultplBReducPrimes,PowerMod[-c6,(#-1)/2,#]==1&]*)
(**)
(*NSplitMultBReducPrimes:=Select[MultplBReducPrimes,PowerMod[-c6,(#-1)/2,#]==#-1&]*)
(**)
(*NEp[p_]:=1+Length[Solve[y^2+EE[[1]]*x y+EE[[3]]*y==x^3+EE[[2]]*x^2+EE[[4]]*x+EE[[5]],*)
(*{x,y},Modulus->p]]*)
(**)
(*ProductL[p_,s_]:=Which[Mod[Delta,p]!=0,1-(p+1-NEp[p])*p^(-s)+p^(1-2s),Mod[Delta,p]==0&&Mod[c4,p]==0,1,*)
(*Mod[Delta,p]==0&&Mod[c4,p]!=0&&PowerMod[Mod[-c6,p],(p-1)/2,p]==1,1-p^(-s),*)
(*Mod[Delta,p]==0&&Mod[c4,p]!=0&&PowerMod[Mod[-c6,p],(p-1)/2,p]==p-1,1+p^(-s)]*)
(**)
(*CoeffsL[p_,n_]:=Which[p==1,1,*)
(*PrimeQ[p]&&Mod[Delta,p]!=0,Block[{a=p+1-NEp[p],discra=Sqrt[a^2-4 p]},Expand[(2^(-1-n) ((a+discra)^(1+n)-(a-discra)^(1+n)))/discra]],*)
(*Mod[Delta,p]==0&&Mod[c4,p]==0,0,*)
(*Mod[Delta,p]==0&&Mod[c4,p]!=0&&PowerMod[Mod[-c6,p],(p-1)/2,p]==1,1,*)
(*Mod[Delta,p]==0&&Mod[c4,p]!=0&&PowerMod[Mod[-c6,p],(p-1)/2,p]==p-1,(-1)^n]*)
(**)
(*Terms[n_]:=Apply[Times,CoeffsL[Delete[#,0]]&/@FactorInteger[n]]*)
(**)
(*(*Trying to calculate L-function via Dokchitser's evaluation. WIP*)*)
(**)
(*A:=Sqrt[Conductor]/Pi*)
(**)
(*phi[t_]:=2*Sqrt[Pi]*E^(-2t)*)
(**)
(*gamma[s_]:=2^(1-s)*Sqrt[Pi]*Gamma[s]*)
(**)
(*G[s_,t_]:=t^(-s)*2^(1-s)*Sqrt[Pi]*Gamma[s,2t]*)
(**)
(*TTheta[t_]:=Sum[Terms[n]*phi[n*t/A],{n,1,500}]*)
(**)
(*NTTheta[s_]:=Sum[Terms[n]*G[s,n/A],{n,1,500}]*)
(**)
(*AnL[s_]:=NIntegrate[TTheta[t]*t^(s-1),{t,0,2000}]*)
(**)
(*FactorL[s_]:=AnL[s]/(A^s*gamma[s])*)
(**)
(*(*Tate's algorithm. Returns Kodaira's symbol, conductor exponent and Tamagawa index. Almost finished*)*)
(**)
(*TripleDistinctQ[{a_,b_,c_}]:=a!=b&&a!=c&&b!=c*)
(**)
(*TripleDoubleQ[{a_,b_,c_}]:=(a==b&&b!=c)||(b==c&&c!=a)||(c==a&&a!=b)*)
(**)
(*TripleEqualQ[{a_,b_,c_}]:=a==b&&a==c&&b==c*)
(**)
(*PairDistinctQ[{a_,b_}]:=a!=b*)
(**)
(*newb6[eq_]:=newa3[eq]^2+4newa6[eq]*)
(**)
(*newb8[eq_]:=newa1[eq]^2*newa6[eq]-newa1[eq]*newa3[eq]*newa4[eq]+newa2[eq]*newa3[eq]^2+4*newa2[eq]*newa6[eq]-newa4[eq]^2*)
(**)
(*v[p_]:=If[Mod[Delta,p]==0,Select[FactorInteger[Delta],#[[1]]==p&][[1,2]],0]*)
(**)
(*ShortChangeR:=Collect[Expand[(MinWeierstrassEq)/.(x->x-a)/.(y->y-c*x-b)],{y,x}]*)
(**)
(*TateCoefficient[m_,n_]:=Coefficient[Coefficient[ShortChangeR,x,m],y,n]*)
(**)
(*TateChangeCoeffs1[p_]:=({a,b,c}/.Solve[*)
(*{Mod[newa3[ShortChangeR],p]==0,*)
(*Mod[newa4[ShortChangeR],p]==0,*)
(*Mod[newa6[ShortChangeR],p]==0},*)
(*{a,b,c},Integers]/. C[1]->0/. C[2]->0/.C[3]->0)[[1]]*)
(**)
(*TateChangeCoeffs2[p_]:=({a,b,c}/.Solve[*)
(*{Mod[newa1[ShortChangeR],p]==0,*)
(*Mod[newa2[ShortChangeR],p]==0,*)
(*Mod[newa3[ShortChangeR],p^2]==0,*)
(*Mod[newa4[ShortChangeR],p^2]==0,*)
(*Mod[newa6[ShortChangeR],p^3]==0},*)
(*{a,b,c},Integers]/. C[1]->0/. C[2]->0/.C[3]->0)[[1]]*)
(**)
(*TateChange1[p_]:=Block[{a=TateChangeCoeffs1[p][[1]],b=TateChangeCoeffs1[p][[2]],c=TateChangeCoeffs1[p][[3]]},*)
(*Expand[(MinWeierstrassEq)/.(x->x-a)/.(y->y-c*x-b)]]*)
(**)
(*TateChange2[p_]:=Block[{a=TateChangeCoeffs2[p][[1]],b=TateChangeCoeffs2[p][[2]],c=TateChangeCoeffs2[p][[3]]},Expand[(MinWeierstrassEq)/.(x->x-a)/.(y->y-c*x-b)]]*)
(*AuxTatePolynomial1[p_]:=T^3+T^2*newa2[TateChange2[p]]/p+T*newa4[TateChange2[p]]/p^2+newa6[TateChange2[p]]/p^3*)
(**)
(*AuxTatePolynomialS1[p_]:=T/.Solve[AuxTatePolynomial1[p]==0,T,Modulus->p]*)
(**)
(*AuxTatePolynomialC2[p_]:=Block[{ShiftTripleRoot=Expand[AuxTatePolynomial1[p]/.(T->T+AuxTatePolynomialS1[p][[1]])]},*)
(*y^2-(x^3+Coefficient[ShiftTripleRoot,T,2]*p*x^2+Coefficient[ShiftTripleRoot,T,1]*p^2*x+Coefficient[ShiftTripleRoot,T,0]*p^3)]*)
(**)
(*AuxTatePolynomial2[p_]:=Y^2+newa3[AuxTatePolynomialC2[p]]*Y/p^2-newa6[AuxTatePolynomialC2[p]]/p^4*)
(**)
(*AuxTatePolynomialS2[p_]:=Y/.Solve[AuxTatePolynomial2[p]==0,Y,Modulus->p]*)
(**)
(*TripleInvariants[p_]:=*)
(*Which[Mod[Delta,p]!=0,{"I0",0,1},*)
(*Mod[Delta,p]==0&&Mod[c4,p]!=0,{"I"<>ToString[v[p]],1,v[p]},*)
(*Mod[newa6[TateChange1[p]],p^2]!=0,{"II",v[p],1},*)
(*Mod[newb8[TateChange1[p]],p^3]!=0,{"III",v[p]-1,2},*)
(*Mod[newb6[TateChange1[p]],p^3]!=0,{"IV",v[p]-2,Maybe[3,1]},*)
(*Length[AuxTatePolynomialS1[p]]==1,{"I0*",v[p]-4,2},*)
(*TripleDistinctQ[AuxTatePolynomialS1[p]],{"I0*",v[p]-4,4},*)
(*TripleDoubleQ[AuxTatePolynomialS1[p]],{"I"<>ToString[nu]<>"*",v[p]-4-nu,Maybe[4,2]},*)
(*TripleEqualQ[AuxTatePolynomialS1[p]]&&AuxTatePolynomialS2[p]===Y,{"IV*",v[p]-6,1},*)
(*TripleEqualQ[AuxTatePolynomialS1[p]]&&PairDistinctQ[AuxTatePolynomialS2[p]],{"IV*",v[p]-6,3},*)
(*TripleEqualQ[AuxTatePolynomialS1[p]]&&!(PairDistinctQ[AuxTatePolynomialS2[p]])&&Mod[newa4[AuxTatePolynomialC2[p]],p^4]!=0,{"III*",v[p]-7,2},*)
(*Mod[Coefficient[Expand[AuxTatePolynomial2[p]/.Y->(Y+AuxTatePolynomialS2[p][[1]])],Y,0]*p^4,p^6]!=0,{"II*",v[p]-8,1},*)
(*True,NotMinimal]*)
(**)
(*KodairaSymbol[p_]:=TripleInvariants[p][[1]]*)
(**)
(*DetailedTateCond[p_]:=TripleInvariants[p][[2]]*)
(**)
(*TamagavaIndex[p_]:=TripleInvariants[p][[3]]*)
(**)
(**)
